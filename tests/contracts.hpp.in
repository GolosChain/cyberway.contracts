#pragma once
#include <eosio/testing/tester.hpp>

namespace eosio { namespace testing {

const std::string cyberway_test_contracts = getenv("CYBERWAY_TEST_CONTRACTS") ?: "${CMAKE_SOURCE_DIR}/test_contracts";
const std::string cyberway_contracts = getenv("CYBERWAY_CONTRACTS") ?: "${CMAKE_BINARY_DIR}/..";

static inline std::vector<uint8_t> read_wasm(const std::string& filename) {return read_wasm(filename.c_str());}
static inline std::vector<char> read_abi(const std::string& filename) {return read_abi(filename.c_str());}

struct contracts {
   static std::vector<uint8_t> system_wasm() { return read_wasm(cyberway_contracts + "/eosio.system/eosio.system.wasm"); }
   static std::vector<char>    system_abi() { return read_abi(cyberway_contracts + "/eosio.system/eosio.system.abi"); }
   static std::vector<uint8_t> domain_wasm() { return read_wasm(cyberway_contracts + "/cyber.domain/cyber.domain.wasm"); }
   static std::vector<char>    domain_abi() { return read_abi(cyberway_contracts + "/cyber.domain/cyber.domain.abi"); }
   static std::vector<uint8_t> token_wasm() { return read_wasm(cyberway_contracts + "/eosio.token/eosio.token.wasm"); }
   static std::vector<char>    token_abi() { return read_abi(cyberway_contracts + "/eosio.token/eosio.token.abi"); }
   static std::vector<uint8_t> msig_wasm() { return read_wasm(cyberway_contracts + "/eosio.msig/eosio.msig.wasm"); }
   static std::vector<char>    msig_abi() { return read_abi(cyberway_contracts + "/eosio.msig/eosio.msig.abi"); }
   static std::vector<uint8_t> wrap_wasm() { return read_wasm(cyberway_contracts + "/eosio.wrap/eosio.wrap.wasm"); }
   static std::vector<char>    wrap_abi() { return read_abi(cyberway_contracts + "/eosio.wrap/eosio.wrap.abi"); }
   static std::vector<uint8_t> bios_wasm() { return read_wasm(cyberway_contracts + "/eosio.bios/eosio.bios.wasm"); }
   static std::vector<char>    bios_abi() { return read_abi(cyberway_contracts + "/eosio.bios/eosio.bios.abi"); }

   struct util {
      static std::vector<uint8_t> test_api_wasm() { return read_wasm(cyberway_test_contracts + "/test_api.wasm"); }
      static std::vector<uint8_t> exchange_wasm() { return read_wasm(cyberway_test_contracts + "/exchange.wasm"); }
      static std::vector<uint8_t> system_wasm_old() { return read_wasm(cyberway_test_contracts + "/eosio.system.old/eosio.system.wasm"); }
      static std::vector<char>    system_abi_old() { return read_abi(cyberway_test_contracts + "/eosio.system.old/eosio.system.abi"); }
      static std::vector<uint8_t> msig_wasm_old() { return read_wasm(cyberway_test_contracts + "/eosio.msig.old/eosio.msig.wasm"); }
      static std::vector<char>    msig_abi_old() { return read_abi(cyberway_test_contracts + "/eosio.msig.old/eosio.msig.abi"); }
   };
};
}} //ns eosio::testing
